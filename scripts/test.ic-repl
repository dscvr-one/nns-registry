// NOTE: when accessing an environment variable a default is always needed
// otherwise ic-repl panics

function count(a, b) {
   add(a, 1);
};

import nns = "${NNS_CANISTER_ID:-rwlgt-iiaaa-aaaaa-aaaaa-cai}" as "../src/nns.did";

// no admins have been added, so should be empty
let result = call nns.get_admins();
assert result == vec {};

// only owner can add admin
identity admin;
let err = fail call nns.add_admin(admin);
assert err ~= "The Replica";

// only admin can get nns principals
let err = fail call nns.get_nns_principals();
assert err ~= "The Replica";

identity whitelist_1;
identity whitelist_2;
identity whitelist_3;
identity nns_principal_1;
identity nns_principal_2;
identity nns_principal_3;

// add an admin
identity default "~/.config/dfx/identity/default/identity.pem";
let result = call nns.add_admin(admin);
assert result == variant { Ok };
// add some whitelisted principals
let result = call nns.whitelist_principals(vec {whitelist_1; whitelist_2; whitelist_3});
assert result == vec {};

// whitelist principals that are already whitelisted
let result = call nns.whitelist_principals(vec {whitelist_2; whitelist_3});
assert result.fold(0, count) == 2;

// admin should be able to access principals
identity admin;
let result = call nns.get_nns_principals();
assert result == vec {};

// check status
let result = call nns.get_status(admin);
assert result == variant { NotWhitelisted };

// set max neurons
let result = call nns.set_max_neurons(2);
assert result == variant { Ok };
let result = call nns.get_max_neurons();
// a direct int comparison isn't working, but stringify works
assert stringify(result) == "2";

// claim nns
identity whitelist_1;
let result = call nns.get_status(whitelist_1);
assert result == variant { Whitelisted };
let result = call nns.add_nns_principal(nns_principal_1);
assert result == variant { Ok };
let result = call nns.get_status(whitelist_1);
assert result == variant { Claimed };
let result = call nns.add_nns_principal(nns_principal_1);
assert result.Err ~= "The Caller is";
let result = call nns.add_nns_principal(nns_principal_2);
assert result.Err ~= "The Caller is";

// claim nns
identity whitelist_2;
let result = call nns.get_status(whitelist_2);
assert result == variant { Whitelisted };
let result = call nns.add_nns_principal(nns_principal_1);
assert result.Err ~= "The NNS Principal";
let result = call nns.add_nns_principal(nns_principal_2);
assert result == variant { Ok };
let result = call nns.get_status(whitelist_2);
assert result == variant { Claimed };

// nns claim failed since max neurons exceeded
identity whitelist_3;
let result = call nns.get_status(whitelist_3);
assert result == variant { Whitelisted };
let result = call nns.add_nns_principal(nns_principal_3);
assert result.Err ~= "Maximum number";
let result = call nns.get_status(whitelist_3);
assert result == variant { Whitelisted };

// reducing max neurons below claimed should fail
identity admin;
let result = call nns.set_max_neurons(1);
assert result.Err ~= "Setting max neurons";

// increase max neurons above claimed is ok
identity admin;
let result = call nns.set_max_neurons(5);
assert result == variant { Ok };

// claim should work now
identity whitelist_3;
let result = call nns.add_nns_principal(nns_principal_3);
assert result == variant { Ok };
let result = call nns.get_status(whitelist_3);
assert result == variant { Claimed };

// three nns principals
identity admin;
let result = call nns.get_nns_principals();
assert result.fold(0, count) == 3;

// add_non_dscvr_nns_principal
identity non_dscvr;
identity non_dscvr_2;
identity nns_principal_4;
identity default "~/.config/dfx/identity/default/identity.pem";
let result = call nns.whitelist_principals(vec { non_dscvr; });
assert result == vec {};
identity admin;
let result = call nns.add_non_dscvr_nns_principal(non_dscvr, nns_principal_4);
assert result == variant { Ok };
let result = call nns.add_non_dscvr_nns_principal(non_dscvr_2, nns_principal_4);
assert result.Err ~= "Caller is not an";
